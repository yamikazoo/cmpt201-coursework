#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#define BUF_SIZE 256
#define EXTRA_SIZE 256
#define BLOCK_SIZE 128

#define handle_error(msg)                                                      \
  do {                                                                         \
    perror(msg);                                                               \
    exit(EXIT_FAILURE);                                                        \
  } while (0)

struct header {
  uint64_t size;
  struct header *next;
};

void print_out(char *format, void *data, size_t data_size) {
  char buf[BUF_SIZE];
  ssize_t len = snprintf(buf, BUF_SIZE, format,
                         data_size == sizeof(uint64_t) ? *(uint64_t *)data
                                                       : *(void **)data);
  if (len < 0) {
    handle_error("snprintf");
  }
  write(STDOUT_FILENO, buf, len);
}

int main() {
  // Step 1: Increase heap size by 256 bytes
  void *heap_start = sbrk(EXTRA_SIZE);
  if (heap_start == (void *)-1) {
    handle_error("sbrk");
  }

  // Step 2: Create two equal size memory blocks
  // First block starts at the beginning of new heap space
  struct header *first_block = (struct header *)heap_start;

  // Second block starts 128 bytes after the first block
  void *second_block_addr = (void *)((char *)heap_start + BLOCK_SIZE);
  struct header *second_block = (struct header *)second_block_addr;

  // Initialize headers
  first_block->size = BLOCK_SIZE;
  first_block->next = NULL;

  second_block->size = BLOCK_SIZE;
  second_block->next = first_block;

  // Calculate data area (after header) for each block
  void *first_data = (void *)((char *)first_block + sizeof(struct header));
  void *second_data = (void *)((char *)second_block + sizeof(struct header));

  size_t data_size = BLOCK_SIZE - sizeof(struct header);

  // Initialize data areas
  memset(first_data, 0, data_size);
  memset(second_data, 1, data_size);

  // Step 3: Print out information
  // Print block addresses
  print_out("first block:       %p\n", &first_block, sizeof(first_block));
  print_out("second block:      %p\n", &second_block, sizeof(second_block));

  // Print block header values
  print_out("first block size:  %lu\n", &(first_block->size), sizeof(uint64_t));
  print_out("first block next:  %p\n", &(first_block->next),
            sizeof(first_block->next));
  print_out("second block size: %lu\n", &(second_block->size),
            sizeof(uint64_t));
  print_out("second block next: %p\n", &(second_block->next),
            sizeof(second_block->next));

  // Print data contents
  unsigned char *first_byte = (unsigned char *)first_data;
  for (size_t i = 0; i < data_size; i++) {
    char buf[4];
    ssize_t len = snprintf(buf, 4, "%d\n", first_byte[i]);
    write(STDOUT_FILENO, buf, len);
  }

  unsigned char *second_byte = (unsigned char *)second_data;
  for (size_t i = 0; i < data_size; i++) {
    char buf[4];
    ssize_t len = snprintf(buf, 4, "%d\n", second_byte[i]);
    write(STDOUT_FILENO, buf, len);
  }

  return 0;
}
